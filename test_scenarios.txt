
API test scenarios:

1. GET /airports

Positive:
* Test Scenario P.1.1: Retrieve a list of all airports.
    * Input: No parameters.
    * Expected Outcome: Response status 200 OK with the expected schema.

* Test Scenario P.1.2: Check pagination.
    * Input: Query parameter for pagination with a random page number within a valid range.
    * Expected Outcome: Response status 200 OK with paginated results.

Negative:
* Test Scenario N.1.1: Invalid Pagination Parameters.
    * Input: Set invalid pagination parameters (e.g., ?page=-1, ?page=abc).
    * Expected Outcome: Response status 400 Bad Request.

* Test Scenario N.1.2: Out-of-Range Pagination.
    * Input: Request a page number beyond the maximum available (e.g., ?page=99999).
    * Expected Outcome: Response status 200 with an empty list, indicating no data on this page.

* Test Scenario N.1.3: Unexpected Query Parameters.
    * Input: Add unsupported query parameters (e.g., ?randomParam=value).
    * Expected Outcome: Response status 200 with default data.

* Test Scenario N.1.4: Incorrect Content-Type Header.
    * Input: Omit the Content-Type header or set it incorrectly (e.g., Content-Type: application/xml).
    * Expected Outcome: Response status 415 Unsupported Media Type.

--------------------------------------------------------------------------------------------------------------------
2. GET /airports/:id

Positive:
* Test Scenario P.2.1: Retrieve an airport by valid ID.
    * Input: Valid airport ID.
    * Expected Outcome: Response status 200 OK with the expected schema.

Negative:
* Test Scenario N.2.1: Invalid Airport ID (Non-Existent).
    * Input: Use an airport ID that does not exist in the database (e.g., /airports/INVALID_ID).
    * Expected Outcome: Response status 404 Not Found, with an error message indicating the airport was not found.

* Test Scenario N.2.2: Malformed Airport ID (Invalid Format)
    * Input: Use an improperly formatted ID (e.g., /airports/1234 where the ID format should be an IATA code).
    * Expected Outcome: Response status 400 Bad Request, with an error message about the invalid ID format.

* Test Scenario N.2.3: Empty Airport ID
    * Input: Send a request with an empty ID parameter (e.g., /airports/ or /airports/null).
    * Expected Outcome: Response status 404 Not Found or 400 Bad Request, with an error message about the missing or invalid ID.

* Test Scenario N.2.4: Special Characters in Airport ID
    * Input: Use special characters in the ID (e.g., /airports/!@#$%).
    * Expected Outcome: Response status 400 Bad Request, with an error message about the invalid characters in the ID.

* Test Scenario N.2.5: SQL Injection Attempt in Airport ID
    * Input: Use an ID designed to test for SQL injection vulnerabilities (e.g., /airports/' OR '1'='1).
    * Expected Outcome: Response status 400 Bad Request or 500 Internal Server Error, with an error message indicating a failed query. The system should be protected from SQL injection.

* Test Scenario N.2.6: Method Not Allowed
    * Input: Attempt to use a method other than GET (e.g., POST, PUT, DELETE) on the /airports/:id endpoint.
    * Expected Outcome: Response status 405 Method Not Allowed, with a message indicating that only the GET method is allowed.

--------------------------------------------------------------------------------------------------------------------

3. POST /airports/distance

* Test Scenario 1: Calculate distance between two valid airports.
    * Input: JSON body with two valid airport IDs.
    * Expected Outcome: Response status 200 OK with calculated distance.
* Test Scenario 2: Calculate distance with invalid airport IDs.
    * Input: JSON body with one or both invalid IDs.
    * Expected Outcome: Response status 400 Bad Request with an error message.
* Test Scenario 3: Validate response structure.
    * Input: JSON body with two valid airport IDs.
    * Expected Outcome: Response contains fields like distance, unit.

--------------------------------------------------------------------------------------------------------------------

4. POST /tokens

* Test Scenario 1: Create a new token with valid credentials.
    * Input: JSON body with valid username and password.
    * Expected Outcome: Response status 200 OK with a token.
* Test Scenario 2: Attempt to create a token with invalid credentials.
    * Input: JSON body with invalid username or password.
    * Expected Outcome: Response status 401 Unauthorized with an error message.
* Test Scenario 3: Validate token response structure.
    * Input: JSON body with valid credentials.
    * Expected Outcome: Response contains fields like token, expires_in.

--------------------------------------------------------------------------------------------------------------------

5. GET /favorites

* Test Scenario 1: Retrieve favorites for authenticated user.
    * Input: Valid authentication token.
    * Expected Outcome: Response status 200 OK with a list of favorite items.
* Test Scenario 2: Access favorites without authentication.
    * Input: No authentication token.
    * Expected Outcome: Response status 401 Unauthorized.

--------------------------------------------------------------------------------------------------------------------

6. GET /favorites/

* Test Scenario 1: Retrieve a favorite item by valid ID.
    * Input: Valid favorite ID and authentication token.
    * Expected Outcome: Response status 200 OK with favorite item details.
* Test Scenario 2: Attempt to retrieve a favorite item with invalid ID.
    * Input: Invalid favorite ID and authentication token.
    * Expected Outcome: Response status 404 Not Found.

--------------------------------------------------------------------------------------------------------------------

7. POST /favorites

* Test Scenario 1: Add a new favorite item with valid data.
    * Input: JSON body with valid favorite data and authentication token.
    * Expected Outcome: Response status 201 Created with the created favorite item.
* Test Scenario 2: Attempt to add a favorite item without authentication.
    * Input: JSON body with valid data but no token.
    * Expected Outcome: Response status 401 Unauthorized.

--------------------------------------------------------------------------------------------------------------------

8. PATCH /favorites/

* Test Scenario 1: Update a favorite item with valid data.
    * Input: Valid favorite ID, JSON body with updated data, and authentication token.
    * Expected Outcome: Response status 200 OK with updated favorite item.
* Test Scenario 2: Attempt to update a favorite item with invalid ID.
    * Input: Invalid favorite ID and authentication token.
    * Expected Outcome: Response status 404 Not Found.

--------------------------------------------------------------------------------------------------------------------

9. DELETE /favorites/

* Test Scenario 1: Delete a favorite item by valid ID.
    * Input: Valid favorite ID and authentication token.
    * Expected Outcome: Response status 204 No Content.
* Test Scenario 2: Attempt to delete a favorite item with invalid ID.
    * Input: Invalid favorite ID and authentication token.
    * Expected Outcome: Response status 404 Not Found.

--------------------------------------------------------------------------------------------------------------------

10. DELETE /favorites/clear_all

* Test Scenario 1: Clear all favorites for authenticated user.
    * Input: Valid authentication token.
    * Expected Outcome: Response status 204 No Content.
* Test Scenario 2: Attempt to clear all favorites without authentication.
    * Input: No authentication token.
    * Expected Outcome: Response status 401 Unauthorized.
These scenarios cover a range of positive and negative cases to ensure robustness in the API functionality and security.
4o mini





